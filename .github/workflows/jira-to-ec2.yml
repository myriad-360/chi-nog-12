name: Poll Jira & Deploy Artifact to EC2

on:
  schedule:
    - cron: '*/5 * * * *'      # every 5 minutes
  workflow_dispatch:          # manual trigger

permissions:
  contents: write              # allow updating .processed_issues

jobs:
  # ──────────────────────────────────────────────────────────────────────
  # Job A: poll Jira & flatten into artifacts/*.json
  poll-and-flatten:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          pip install requests python-dotenv

      - name: Prepare artifacts & memory
        run: |
          mkdir -p artifacts
          touch .processed_issues

      - name: Run Jira polling script
        env:
          JIRA_EMAIL:   ${{ secrets.JIRA_EMAIL }}
          JIRA_TOKEN:   ${{ secrets.JIRA_TOKEN }}
          JIRA_PROJECT: ${{ vars.JIRA_PROJECT }}
          JIRA_STATUS:  ${{ vars.JIRA_STATUS }}
          JIRA_SITE:    ${{ vars.JIRA_SITE }}
        run: python jira/jira_polling_script.py

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jira-artifacts
          path: artifacts/*.json

      - name: Commit & push memory update
        if: success()
        run: |
          git config user.name  "GitHub Actions"
          git config user.email "actions@github.com"
          git add .processed_issues
          git commit -m "chore: update processed issues [skip ci]" || echo "Nothing to commit"
          git push

  # ──────────────────────────────────────────────────────────────────────
  # Job B: deploy artifacts to EC2 & run Ansible
  deploy-to-ec2:
    needs: poll-and-flatten
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts (optional)
        uses: actions/download-artifact@v4
        with:
          name: jira-artifacts
          path: artifacts
        continue-on-error: true

      - name: Check for downloaded artifacts
        id: check-artifacts
        run: |
          shopt -s nullglob
          files=(artifacts/*)
          if [ ${#files[@]} -eq 0 ]; then
            echo "found=false" >> "$GITHUB_OUTPUT"
          else
            echo "found=true"  >> "$GITHUB_OUTPUT"
          fi

      - name: Skip deploy if no artifacts
        if: steps.check-artifacts.outputs.found == 'false'
        run: |
          echo "⚠️  No Jira artifacts found. Skipping deploy."
          exit 0

      - name: Checkout repo
        if: steps.check-artifacts.outputs.found == 'true'
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Set up AWS credentials
        if: steps.check-artifacts.outputs.found == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:           ${{ vars.AWS_REGION }}

      - name: Get EC2 Public IP by Name tag
        if: steps.check-artifacts.outputs.found == 'true'
        id: ec2_ip
        run: |
          INSTANCE_NAME="${{ vars.EC2_INSTANCE_NAME }}"
          echo "▶ Looking up Public IP for instance Name=${INSTANCE_NAME}"
          ip=$(aws ec2 describe-instances \
            --filters \
              "Name=tag:Name,Values=${INSTANCE_NAME}" \
              "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)
          if [[ -z "$ip" || "$ip" == "None" ]]; then
            echo "❌ No running instance found with Name=${INSTANCE_NAME}"
            exit 1
          fi
          echo "ip=$ip" >> "$GITHUB_OUTPUT"

      - name: Set up SSH key
        if: steps.check-artifacts.outputs.found == 'true'
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Authorize SSH from Runner IP
        if: steps.check-artifacts.outputs.found == 'true'
        run: |
          runner_ip=$(curl -s https://api.ipify.org)
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ vars.SG_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${runner_ip}/32 \
            --region ${{ vars.AWS_REGION }} || true

      - name: Copy & print artifact via Ansible
        if: steps.check-artifacts.outputs.found == 'true'
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
        run: |
          ARTIFACT=$(ls artifacts/*.json | head -n1)
          TARGET_IP=${{ steps.ec2_ip.outputs.ip }}
          echo "▶ Copying $ARTIFACT to $TARGET_IP and printing via Ansible"
          ansible-playbook ansible/print-artifact.yml \
            -i "${TARGET_IP}," \
            --user ${{ secrets.EC2_USER }} \
            --private-key key.pem \
            --ssh-extra-args "-o StrictHostKeyChecking=no" \
            -e "artifact_src=${ARTIFACT}" \
            -e "ansible_python_interpreter=/usr/bin/python3"

      - name: Revoke SSH rule from Security Group
        if: steps.check-artifacts.outputs.found == 'true'
        run: |
          runner_ip=$(curl -s https://api.ipify.org)
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ vars.SG_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${runner_ip}/32 \
            --region ${{ vars.AWS_REGION }} || true