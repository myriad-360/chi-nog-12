name: Run Ansible Hello World on EC2
# The name of the workflow, displayed in the GitHub Actions UI.

on:
  workflow_dispatch:
  # This workflow can be triggered manually using the "Run workflow" button in the GitHub Actions UI.

jobs:
  run-ansible:
    runs-on: ubuntu-latest
    # The job will run on the latest version of an Ubuntu-based GitHub-hosted runner.

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      # Checks out the repository code so it can be used in subsequent steps.

    - name: Set up SSH key
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
        chmod 600 key.pem
      # Creates an SSH private key file from a GitHub secret and sets appropriate permissions.

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
      # Configures AWS CLI credentials using secrets and a predefined AWS region.

    - name: Get GitHub runner's public IP
      id: ip
      run: echo "ip=$(curl -s https://api.ipify.org)" >> "$GITHUB_OUTPUT"
      # Retrieves the public IP address of the GitHub runner and stores it in the workflow output.

    - name: Get VPC ID by Name tag
      id: vpc
      run: |
        vpc_id=$(aws ec2 describe-vpcs \
          --filters "Name=tag:Name,Values=chi-nog-12-pa" \
          --query "Vpcs[0].VpcId" \
          --output text)
        if [[ "$vpc_id" == "None" ]]; then
          echo "No VPC found with tag Name=chi-nog-12-pa"
          exit 1
        fi
        echo "id=$vpc_id" >> "$GITHUB_OUTPUT"
      # Queries AWS to find the VPC ID associated with a specific Name tag.
      # Exits the workflow if no VPC is found with the specified tag.
      # Outputs the VPC ID for use in subsequent steps.

    - name: Get SG ID from VPC
      id: sg
      run: |
        sg_id=$(aws ec2 describe-security-groups \
          --filters "Name=group-name,Values=nautobot-sg" "Name=vpc-id,Values=${{ steps.vpc.outputs.id }}" \
          --query "SecurityGroups[0].GroupId" \
          --output text)
        echo "id=$sg_id" >> "$GITHUB_OUTPUT"

    - name: Authorize SSH from runner IP
      run: |
        aws ec2 authorize-security-group-ingress \
          --group-id ${{ steps.sg.outputs.id }} \
          --protocol tcp \
          --port 22 \
          --cidr ${{ steps.ip.outputs.ip }}/32 \
          --region ${{ vars.AWS_REGION }} || true

    - name: Get EC2 Public IP by Name tag
      id: ec2_ip
      run: |
        INSTANCE_NAME="${{ vars.EC2_INSTANCE_NAME }}"
        echo "Looking up Public IP for instance named: $INSTANCE_NAME"
        ip=$(aws ec2 describe-instances \
          --filters \
            "Name=tag:Name,Values=${INSTANCE_NAME}" \
            "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].PublicIpAddress" \
          --output text)
        if [[ -z "$ip" || "$ip" == "None" ]]; then
          echo "❌ No running instance found with Name=${INSTANCE_NAME}"
          exit 1
        fi
        echo "ip=$ip" >> "$GITHUB_OUTPUT"
    - name: Run Ansible playbook remotely
      run: |
        TARGET_IP="${{ steps.ec2_ip.outputs.ip }}"
        echo "▶ Running playbook against $TARGET_IP"
        ansible-playbook ansible/ansible-hello-world-via-actions.yml \
          -i "${TARGET_IP}," \
          --user ${{ secrets.EC2_USER }} \
          --private-key key.pem \
          --ssh-extra-args "-o StrictHostKeyChecking=no" \
          -e "ansible_python_interpreter=/usr/bin/python3"
      env:
        ANSIBLE_HOST_KEY_CHECKING: "False"
    # - name: Run Ansible playbook remotely
    #   run: |
    #     ansible-playbook ansible/ansible-hello-world-via-actions.yml \
    #       -i "${{ vars.EC2_HOST }}," \
    #       --user ${{ secrets.EC2_USER }} \
    #       --private-key key.pem \
    #       --ssh-extra-args "-o StrictHostKeyChecking=no" \
    #       -e "ansible_python_interpreter=/usr/bin/python3"
    #   env:
    #     ANSIBLE_HOST_KEY_CHECKING: "False"

    - name: Revoke SSH rule from security group
      if: always()
      run: |
        aws ec2 revoke-security-group-ingress \
          --group-id ${{ steps.sg.outputs.id }} \
          --protocol tcp \
          --port 22 \
          --cidr ${{ steps.ip.outputs.ip }}/32 \
          --region ${{ vars.AWS_REGION }} || true
